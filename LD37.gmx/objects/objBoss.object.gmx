<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBoss</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-500</depth>
  <persistent>-1</persistent>
  <parentName>objSolid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
freeze = true;
obstaclesRemoved = false;
system=part_system_create();
part_system_depth(system,-100);

part=part_type_create();
part_type_shape(part,pt_shape_disk);
part_type_speed(part,3,5,.1,0);
part_type_colour1(part,c_white);
part_type_life(part,45,60);
part_type_size(part,1.5,2,-.05,0);
part_type_alpha1(part,0.3);


Sname = part_system_create()
particle1 = part_type_create();
part_type_shape(particle1,pt_shape_square);
part_type_size(particle1,0.15,0.25,-0.006,0);
part_type_speed(particle1,0.75,1.25,0,0);
part_type_direction(particle1,0,359,0,0);
part_type_colour1(particle1,objColorize.goodColor);
part_type_blend(particle1,1);
part_type_life(particle1,60,60);
emitter1 = part_emitter_create(Sname);

phase1 = false;
t =0;
cutsceneAlpha = 0;
switchToAvoidance = false;
wave4Started = false;
offset1 = 0;
deathCutscene=false;

alphaT = 0;
goUp = true;
goDown = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(objBossHitbox))
{
    with(objBossHitbox)
        instance_destroy();
}

if(instance_exists(objBossProj))
    {
    with(objBossProj)
        instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!deathCutscene)
{
if(freeze)
{
 var _dir=random(360);
    var _dist=180;
    var _x=x+lengthdir_x(_dist,_dir);
    var _y=y+lengthdir_y(_dist,_dir);
    var _part_dir=point_direction(_x,_y,x,y);
    part_type_direction(part,_part_dir,_part_dir,0,0);
    part_particles_create(system,_x,_y,part,1);
}
else
{
    if(obstaclesRemoved)
    {
        if(!instance_exists(objBossHitbox))
            instance_create(x,y,objBossHitbox)
        
        if(!switchToAvoidance)
        {
        if(t == 75)
        {
            for(i=0; i &lt; 35; i++)
            {
                instance_create(x+lengthdir_x(500,360/35 * i),y+lengthdir_y(500,360/35 * i), objEnemyBaseTier1);
            }
            audio_play_sound(sndBossShoot,1,false);
        }
        else if(t == 255)
        {
            for(i=0; i &lt; 35; i++)
            {
                instance_create(x+lengthdir_x(550,360/35 * i),y+lengthdir_y(550,360/35 * i), objEnemyBaseTier2);
            }
            audio_play_sound(sndBossShoot,1,false);
        }
        else if(t == 435)
        {
            for(i=0; i &lt; 35; i++)
            {
                instance_create(x+lengthdir_x(600,360/35 * i),y+lengthdir_y(600,360/35 * i), objEnemyBaseTier3);
            }
            audio_play_sound(sndBossShoot,1,false);
        }
        else if(t == 615)
        {
        wave4Started = true;
             for(i=0; i &lt; 60; i++)
            {
                instance_create(x+lengthdir_x(650,360/60 * i),y+lengthdir_y(650,360/60 * i), objEnemyBaseTier4);
            }
            audio_play_sound(sndBossShoot,1,false);
        }
        
        
        if(wave4Started &amp;&amp; instance_number(objEnemyBase) ==0)
        {
            switchToAvoidance = true;
            if(instance_exists(objPlayer))
                objPlayer.hp = objPlayer.maxhp;
            objBossHitbox.aceptDamage = true;
            t= 0;
        }
        else
            t++;
        }
        else
        {
            //avoidance
            if(t &lt; 420)
            {
                if(t mod 20 == 0)
                {
                    for(i = 0; i &lt; 20;i++)
                    {
                        proj =instance_create(x+lengthdir_x(150,360/20 * i + offset1),y+lengthdir_y(150,360/20 * i + offset1), objBossProj);
                        proj.direction = point_direction(x,y,proj.x,proj.y);
                        proj.speed=5;
                    }
            audio_play_sound(sndBossShoot,1,false);
                offset1+=5;
                }
            }
            
            
            if(t &gt;= 500 &amp;&amp; t &lt; 800)
            {
               
                        proj = instance_create(x,y,objBossProj);
                        proj.image_xscale = 0.5;
                        proj.image_yscale = 0.5;
                        proj.speed = random_range(2,4);
                        proj.direction = random(360);
                if(t mod 20 == 0)
                 audio_play_sound(sndBossShoot,1,false);
            }
            
            
            if(t &gt;= 920 &amp;&amp; t &lt; 1340)
            {
                    ang = random(360);
                    proj = instance_create(x+lengthdir_x(1700,ang),y+lengthdir_y(1700,ang), objBossProj);
                    proj.direction = point_direction(proj.x,proj.y, x,y);
                    proj.speed = random_range(3,5);
                    proj.image_xscale = 0.5;
                    proj.image_yscale = 0.5;
                    proj.dieOnCol = true;
                if(t mod 20 == 0)
                 audio_play_sound(sndBossShoot,1,false);
            }
            
            
            t++
            
            
            if(t &gt; 1750)
                t = 0;
        }
        
    }
}

}
else
{
randX = x+irandom_range(-120,120)
randY = x+irandom_range(-120,120)
part_emitter_region(Sname,emitter1,randX,randX,randY,randY,ps_shape_ellipse,1);
part_emitter_burst(Sname,emitter1,particle1,150);
    //death particles
    
    if(t mod 10 == 0)
        audio_play_sound(sndBossExpl,1,false);
    t++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1.0);
draw_self();

if(!obstaclesRemoved &amp;&amp; !freeze &amp;&amp; room == main)
{
    draw_sprite_ext(sprWhite,0,0,0,1576,1576,0,c_white,cutsceneAlpha);
    cutsceneAlpha+=0.007;
    if(cutsceneAlpha &gt;= 0.99)
        room_goto_next();
}
else if(!obstaclesRemoved &amp;&amp; !freeze &amp;&amp; room == room2)
{
    draw_sprite_ext(sprWhite,0,0,0,1576,1576,0,c_white,cutsceneAlpha);
    cutsceneAlpha-=0.09;
    if(cutsceneAlpha &lt;= 0.01)
        obstaclesRemoved = true;
}

if(deathCutscene)
{

    if(t &lt; 200)
    {
    if(alphaT &lt; 0.85 &amp;&amp; goUp)
    {
        alphaT+=0.04;
    }
    if(alphaT &gt; 0.85 &amp;&amp; goUp)
    {
        goUp = false;
        goDown = true;
    }
        
    if(alphaT &gt; 0.15 &amp;&amp; goDown)
    {
        alphaT-=0.04;
    }
    if(alphaT &lt; 0.15 &amp;&amp; goDown)
    {
        goUp = true;
        goDown = false;
    }
    }
    else
    {
        if(alphaT &lt; 1&amp;&amp; room == room2)
            alphaT +=0.04;
            
        if(alphaT &gt;0.99 &amp;&amp; room == room2)
        {
            room_goto_next();
            with(objBg)
                instance_destroy();
            x = -500;
            y = -500;
            
            with(objPlayer)
            {
                x = 768/2;
                y = 576/2;
            }
        }
            
        if(room == room3 &amp;&amp; alphaT &gt; 0.0)
        {
            alphaT -= 0.04;
        }
        
        if(room == room3 &amp;&amp; alphaT &lt; 0.1)
        {
            instance_destroy();
        }
        
    }
    draw_sprite_ext(sprRed,0,view_xview[0], view_yview[0], 1536,1536,0,c_white,alphaT);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
