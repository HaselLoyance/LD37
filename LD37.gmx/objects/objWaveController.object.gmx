<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5001</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>curWave = 1;
waveStarted = false;
timerStarted = false;
t= 0;
spawned = false;
skip = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!skip)
{



if(waveStarted &amp;&amp; !spawned)
{
spawned = true;
with(objTempCollision)
{
    if(!always)
    {
       
        solid = true;
    }
}
    //based on wave number spawn enemies and increase their diff
    switch(curWave)
    {
        case 1: 
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        case 2: 
        repeat(16)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        case 3: 
        repeat(24)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        case 4: 
        repeat(14)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        case 5: 
        repeat(20)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(14)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        
        case 6: 
        repeat(20)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(20)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        
        case 7: 
        repeat(4)
        {
            obj = instance_create(144,144,objEnemyBaseTier3);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(16)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        
        case 8: 
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier3);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(16)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(16)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        case 9: 
        repeat(12)
        {
            obj = instance_create(144,144,objEnemyBaseTier3);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(10)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(16)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
        
        case 10: 
        repeat(4)
        {
            obj = instance_create(144,144,objEnemyBaseTier4);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        repeat(4)
        {
            obj = instance_create(144,144,objEnemyBaseTier3);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(4)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(4)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
         case 11: 
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier4);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier3);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
        
         case 12: 
        repeat(16)
        {
            obj = instance_create(144,144,objEnemyBaseTier4);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        repeat(8)
        {
            obj = instance_create(144,144,objEnemyBaseTier3);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(16)
        {
            obj = instance_create(144,144,objEnemyBaseTier1);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
        repeat(12)
        {
            obj = instance_create(144,144,objEnemyBaseTier2);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        break;
    }
    
    
    
with(objTempCollision)
{
    if(!always)
    {
        
        solid = false;
    }
}
}

if(waveStarted)
{
    t++;
}
}

if(skip || (waveStarted &amp;&amp; instance_number(objEnemyBase) == 0)) //all enemies in wave killed
{
skip = false;
    objColorize.goodColor = make_colour_hsv(curWave * 10.583, 224,224);
    objColorize.badColor = make_colour_hsv(curWave * 10.583+127, 224,224);
    
    if(instance_exists(objPlayer))
    {
    //upgrade hp and refill it
    objPlayer.maxhp += 10;
    objPlayer.hp = objPlayer.maxhp;
    }
    
    objMagaz.magazUnavailable = false;
    objMagaz.somethingbought = false;
    //spawn some money packs
    
    repeat(6)
        {
            obj = instance_create(144,144,objBigMoneyPack);
            with(obj)
            {
                do
                {
                    randx = random(room_width);
                    randy = random(room_height);
                } until (place_free(randx, randy));
                x = randx;
                y = randy;
            }
        }
        
    curWave++;
    waveStarted = false;
    spawned = false;
    t =0;
    
    if(instance_exists(objPlayer))
    {
    //set enemy helath mp based on next wave
    switch(curWave)
    {
        case 2: objPlayer.enemyHealthMp = 1.7; break;
        case 3: objPlayer.enemyHealthMp = 2.0; break; 
        case 4: objPlayer.enemyHealthMp = 1.0; break; //begin tier 2
        case 5: objPlayer.enemyHealthMp = 1.4; break;
        case 6: objPlayer.enemyHealthMp = 1.8; break;
        case 7: objPlayer.enemyHealthMp = 1.0; break; //begin tier 3
        case 8: objPlayer.enemyHealthMp = 1.2; break;
        case 9: objPlayer.enemyHealthMp = 1.6; break;
        case 10: objPlayer.enemyHealthMp = 1.0; break; //begin tier 4
        case 11: objPlayer.enemyHealthMp = 1.5; break;
        case 12: objPlayer.enemyHealthMp = 2.0; break;
        case 13: 
        objPlayer.maxhp += 300;
        objPlayer.hp = objPlayer.maxhp;
        objPlayer.enemyHealthMp = 1.75; objBoss.freeze = false; instance_destroy(); break; //final boss
    }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

        draw_set_font(ftHUD);
draw_set_halign(fa_center);
draw_set_color(objColorize.goodColor);

if(!skip)
{
if(!waveStarted &amp;&amp; !timerStarted)
{
    timerStarted = true;
    t = 0;
}
else if(!waveStarted &amp;&amp; timerStarted)
{   
    if(t &lt; 420)
    {
        draw_text(view_xview[0] + 384,view_yview[0]+550, "Wave "+ string(curWave)+ " in " + string(round((420 - (t/60) * 60)/60)) + "...");
    }
    
    if(t &gt;= 420 &amp;&amp; t &lt; 480)
    {
        waveStarted = true;
        timerStarted = false;
       draw_text(view_xview[0] + 384,view_yview[0]+550, "Wave "+ string(curWave)+ "!" );
    }
        t++;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
